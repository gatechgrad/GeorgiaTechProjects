#include <stdio.h>
#include <stdlib.h>
#include <allegro.h>


/* CONSTANTS */
#define MAP_ROWS 100
#define MAP_COLS 100
#define INITIAL_PERCENT 5
#define CELL_WIDTH 2
#define CELL_HEIGHT 2
#define DELAY 100

/* FUNCTION PROTOTYPES */
void start_game(void);
void setup_allegro(void);
void initialize_map(int iMap[MAP_ROWS][MAP_COLS], int iRows, int iCols, int iPercent);
void reset_map(int iMap[MAP_ROWS][MAP_COLS]);
int main(void);


/**
 * starts the game
 */
void start_game(void) {
    int iKeyPressed;
    BITMAP *bmpBuffer;
    int iMap[MAP_ROWS][MAP_COLS];
    int iNewMap[MAP_ROWS][MAP_COLS];
    int i, j;
    int iColor;
    int iNeighborsAlive;
    int iKeepLooping;
    int iIntensity;
    int iColorChoice;



    bmpBuffer = create_bitmap(SCREEN_W, SCREEN_H);

    iKeyPressed = -1;
    iColorChoice = 0;

    iKeepLooping = TRUE;
    
    reset_map(iMap);
    reset_map(iNewMap);
    initialize_map(iMap, MAP_ROWS, MAP_COLS, INITIAL_PERCENT);

    while (iKeepLooping) {

        clear(bmpBuffer);


        for (i = 0; i < MAP_COLS; i++) {
            for (j = 0; j < MAP_ROWS; j++) {
                if (iMap[i][j] > 0) {

                    iIntensity = 64 + iMap[i][j] * 32;
                    if (iIntensity > 255) {
                        iIntensity = 255;
                    }

                    switch (iColorChoice) {
                        case 0:
                            iColor = makecol(0, iIntensity, iIntensity);
                            break;
                        case 1:
                            iColor = makecol(iIntensity, 0, 0);
                            break;
                        case 2:
                            iColor = makecol(iIntensity, iIntensity, 0);
                            break;
                        case 3:
                            iColor = makecol(0, 0, iIntensity);
                            break;
                        case 4:
                            iColor = makecol(0, iIntensity, 0);
                            break;
                        case 5:
                            iColor = makecol(iIntensity, 0, iIntensity);
                            break;
                        default:
                            iColorChoice = 0;
                            iColor = makecol(0, iIntensity, iIntensity);
                    }



                    rectfill(bmpBuffer, i * CELL_WIDTH, j * CELL_HEIGHT, ((i + 1) * CELL_WIDTH) - 1, ((j + 1) * CELL_HEIGHT) - 1, iColor);
                }
            }
        }


        for (i = 0; i < MAP_ROWS; i++) {
            for (j = 0; j < MAP_COLS; j++) {
                iNeighborsAlive = 0;

                /* check left neighbors */
                if (iMap[get_cell_number(i - 1, 0, MAP_ROWS)][get_cell_number(j - 1, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i - 1, 0, MAP_ROWS)][get_cell_number(j - 1, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }

                if (iMap[get_cell_number(i - 1, 0, MAP_ROWS)][get_cell_number(j, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i - 1, 0, MAP_ROWS)][get_cell_number(j, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }

                if (iMap[get_cell_number(i - 1, 0, MAP_ROWS)][get_cell_number(j + 1, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i - 1, 0, MAP_ROWS)][get_cell_number(j + 1, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }

                if (iMap[get_cell_number(i, 0, MAP_ROWS)][get_cell_number(j - 1, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i, 0, MAP_ROWS)][get_cell_number(j - 1, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }

                if (iMap[get_cell_number(i, 0, MAP_ROWS)][get_cell_number(j + 1, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i, 0, MAP_ROWS)][get_cell_number(j + 1, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }

                if (iMap[get_cell_number(i + 1, 0, MAP_ROWS)][get_cell_number(j - 1, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i + 1, 0, MAP_ROWS)][get_cell_number(j - 1, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }

                if (iMap[get_cell_number(i + 1, 0, MAP_ROWS)][get_cell_number(j, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i + 1, 0, MAP_ROWS)][get_cell_number(j, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }

                if (iMap[get_cell_number(i + 1, 0, MAP_ROWS)][get_cell_number(j + 1, 0, MAP_COLS)]) {
                    if (iMap[get_cell_number(i + 1, 0, MAP_ROWS)][get_cell_number(j + 1, 0, MAP_COLS)] > 0) {
                        iNeighborsAlive++;
                    }
                }





                

                /* rules for a current cell */
                if (iMap[i][j] > 0) {
                    if (iNeighborsAlive < 2) {
                        iNewMap[i][j] = 0;

                    } else if (iNeighborsAlive > 3) {
                        iNewMap[i][j] = 0;
                    } else {
                        iNewMap[i][j] = iMap[i][j] + 1;
                    }

                } else if (iMap[i][j] <= 0) {
                    if (iNeighborsAlive > 2) {
                        iNewMap[i][j] = 1;
                    } else {
                        iNewMap[i][j] = 0;
                    }

                }


            }
        }


        for (i = 0; i < MAP_ROWS; i++) {
            for (j = 0; j < MAP_COLS; j++) {
                iMap[i][j] = iNewMap[i][j];
            }
        }


        blit(bmpBuffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
        rest(DELAY);


        if (keypressed()) {

            iKeyPressed = readkey();

            switch (iKeyPressed >> 8) {
                case KEY_ENTER:
                    reset_map(iMap);
                    reset_map(iNewMap);
                    initialize_map(iMap, MAP_ROWS, MAP_COLS, INITIAL_PERCENT);
                    break;
                case KEY_C:
                    iColorChoice++;
                    if (iColorChoice == 6) {
                        iColorChoice = 0;
                    }
                    break;
                default:
                    iKeepLooping = FALSE;
            }



        }
    }

    destroy_bitmap(bmpBuffer);
}


/**
 * loads map with random data
 */
void initialize_map(int iMap[MAP_ROWS][MAP_COLS], int iRows, int iCols, int iPercent) {
    int i, j;

    for (i = 0; i < iRows; i++) {
        for (j = 0; j < iCols; j++) {
            if ((random() % 100) < iPercent) {
                iMap[i][j] = 1;
            }
        }
    }

}

/**
 *  returns iMax - 1 if i is less than iMin,
 *          iMin if i is greater than or equal to iMax,
 *          or i if i is between iMin and iMax
 */
int get_cell_number(int i, int iMin, int iMax) {
    int iToReturn;

    if (i < iMin) {
        iToReturn = iMax - 1;

    } else if (i >= iMax) {
        iToReturn = iMin;
    } else {
        iToReturn = i;
    }

    return iToReturn;


}

/**
 * resets a map to all zeros
 */

void reset_map(int iMap[MAP_ROWS][MAP_COLS]) {
    int i, j;


    for (i = 0; i < MAP_ROWS; i++) {
        for (j = 0; j < MAP_COLS; j++) {
            iMap[i][j] = 0;
        }
    }
}




/**
 * sets up Allegro
 */
void setup_allegro(void) {
    allegro_init();
    install_keyboard();
    install_timer();
    set_color_depth(16);
    set_gfx_mode(GFX_AUTODETECT, 320, 200, 0, 0);

    text_mode(-1);


}




/**
 * called when program is executed
 */
int main(void) {

    setup_allegro();
    start_game();



    return 0;
}

