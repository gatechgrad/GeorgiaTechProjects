CS 1502: JAVA! Programming Assignment #4 - Winter 1999

Program Title:   A Very Brady Program
Assigned:        January 22, 1999
P4 Program Due:  February 5, 1999
D4 Design Due:   January 30, 1999

Files Provided:
    o p4.nfo              - this file
    o design_info.txt     - information about design documents
    o p4_70.dat           - sample data for a 70
    o p4_70.ans           - sample answers for a 70
    o p4_85.dat           - sample data for a 85
    o p4_85.ans           - sample answers for a 85
    o p4_100.dat          - sample data for a 100
    o p4_100.ans          - sample answers for a 100
    o p4_extra.dat        - sample data for a 100 + extra credit
    o p4_extra.ans        - sample answers for a 100 + extra credit

Learning Objectives:
    o constructing n-ary trees
    o printing n-ary trees
    o searching n-ary trees
    o designing programs, part 1


GENERAL OVERVIEW:
========================================================================

In our quest to achieve Computer Science nirvana, we will explore
another popular data structure, the tree.  You should have many fond
memories of trees from CS 1501; this time you'll get to create your own.
Now you're probably thinking, "What uses are there for binary trees?"
And you would be absolutely correct -- there aren't many for *binary*
trees.  So instead, we'll be doing n-ary trees.

Say what?!

     n-ary tree (EN-air-ee TREE) noun:  A dynamic data structure in
     which a parent node does not have just two child nodes, as in a
     binary tree, but any number of child nodes.

Many things in the world can be modeled as an n-ary tree.  The most
obvious is a family tree.  Let's take, for example, Mike Brady:

           Mike
         /   |   \
        /    |    \
     Greg  Peter  Bobby

If we were stuck with just a binary tree, then Mike could only have two
kids, and Bobby would get the shaft.  Not a pleasant idea; Mike would
then be busy with just two boys of his own.

To continue the example, add the lovely lady Carol to the group.  To
make things complete, toss in Alice, and we would have this:

                      Alice
                   /         \
                  /           \ 
                 /             \         (figure 1)
            Carol              Mike
           /  |  \           /   |   \
          /   |   \         /    |    \
     Marcia  Jan  Cindy  Greg  Peter  Bobby

(Yes, we all know that Alice was not Mike's and Carol's biological
mother; that didn't stop Alice from oft acting as a mother to them
anyways.)

What if we were given a pointer to the head node (in this case, a
reference to Alice), and we needed to search for a particular person.
In our journeys through CS-land, we've stumbled upon two techniques, the
depth first search (DFS) and breadth first search (BFS).  That this
program involves searching is much more than a hunch.  It is true, that
we're dealing with a family; that's why we will code by the bunch.


IMPLEMENTING N-ARY TREES:
========================================================================

Take a look at figure 1 again.  See how Alice only has two child nodes,
while Carol and Mike each have three?  Take your typical pseudocode
binary tree node:

    Tree_Node definesa record
        data isoftype Num
        left_child isoftype Ptr toa Tree_Node
        right_child isoftype Ptr toa Tree_Node
    endrecord  //Tree_node

(Source:  page 178 of "Introduction to Computing and Algorithms" [i.e.,
CS1501 textbook])

Here's, the number of child nodes is exactly two -- a left and right
child.  Instead, the n-ary tree node for p4 would need to look like:

    NTree_Node definesa record
        data isoftype String
        children isoftype NTree_Linked_List
    endrecord  //NTree_Node

Where Linked_List is your linked list class from p3.  In this case, the
linked list will hold pointers to other NTree_Nodes.  It looks like:

    NTree_Linked_List definesa record
       data isoftype Ptr toa NTree_Node
       next isoftype Ptr toa NTree_Linked_List
    endrecord  //NTree_Linked_list

(You may find that it is easier to have NTree_Linked_List be a
doubly-linked list instead.)

To obtain a reference to the left child of a Tree_Node, one would say:

     myTree_Node^.left_child

But for NTree_Nodes, there is no concept of "left" or "right", but just
"first", "second", etc.  So references to the first and second children
are:

     myNTree_Node.children^.data        // the "first" child
     myNTree_Node.children^.next^.data  // the "second" child


PROGRAM WALKTHROUGH:
========================================================================

Now that you've got the tools, what do you have to do?  Like p3 before,
your program will read in a series of names from the user; afterwards it
will do some searching and printing.  If you coded p3 correctly you may
even be able to use its input routines for this program.

First, prompt the user for the name of the "head" node.  Then let the
user enter its children's names, one at a time until he submits "END".
Then, recursively repeat through those children, asking for her
children.  Repeat until the user enters "END" for all children.  Here's
an example run, if the user were to use the values from figure 2:

Enter the root node's name :
Alice Nelson

Enter Alice Nelson's child's name :
Carol Brady
Enter Alice Nelson's child's name :
Mike Brady
Enter Alice Nelson's child's name :
END

Enter Carol Brady's child's name :
Marcia Brady
Enter Carol Brady's child's name :
Jan Brady
Enter Carol Brady's child's name :
Cindy Brady
Enter Carol Brady's child's name :
END

Enter Mike Brady's child's name :
Greg Brady
Enter Mike Brady's child's name :
Peter Brady
Enter Mike Brady's child's name :
Bobby Brady
Enter Mike Brady's child's name :
END

Enter Marcia Brady's child's name :
END

Enter Jan Brady's child's name :
END
        :                                     ( lines snipped )
        :                                     (  for brevity  )
Enter Bobby Brady's child's name :
END

Now that you've got your data, display an introduction:

Welcome to Winter 99 Program 4
------------------------------


Don't forget the newline character, ala p2.  Next, display a menu:

(1) Print the Tree
(2) Search for a Name
(3) Search for a Name, and Display its Path
(0) Quit

If the user picks the first option, then display the entire tree.  Given
the sample run above, its printing would be:

Alice Nelson
Carol Brady, Alice Nelson's child
Marcia Brady, Carol Brady's child
Jan Brady, Carol Brady's child
Cindy Brady, Carol Brady's child
Mike Brady, Alice Nelson's child
Greg Brady, Mike Brady's child
Peter Brady, Mike Brady's child
Bobby Brady, Mike Brady's child

Afterwards, present the menu again.

If the user opts to search, prompt her for a name.  Then search the tree
for that name, using any algorithm (e.g., DFS or BFS) you wish.  If the
name is in the tree, print an affirmation; if not, then say so.  An
example for an existing name:

Enter the name to search :
Peter Brady
Peter Brady is in the tree.

And here's an example for one that isn't:

Enter the name to search :
Tiger
Tiger is not in the tree.

The third menu option is described in the extra credit below, and is not
required for the 100% section.  You still must display the choice, so
that diff/fc will function properly.


DESIGN DOC WALKTHROUGH:
========================================================================

Starting with this program and continuing with subsequent ones, you must
submit a design document for each program.  The structure for the design
should be similar to example design document from p3.  You'll find more
example design documents on the class web page.  Instructions on writing
and grading design documents may be found in "design_info.txt".

Make sure you answer these scenario questions:

(1)  What data structure(s) do you need to hold the n-ary tree?
(2)  Which class is responsible for performing the printing?
(3)  How can you design the data structures such that they are reusable?
     Hint:  Think inheritance and generic data structures.
(4)  Who keeps a reference to the root node?

Your design is due at 11:59 pm on the Saturday before the program is
due.


HINTS AND TIPS:
========================================================================

Traversals
----------
Notice how there are two types of traversals done in this program?  When
inputting data, one reads in all of the children's names before
recursing deeper; when printing, one prints the child's children before
moving on.  Hmm...the first sounds like a breadth first traversal, while
the second is a depth first.


Comparing Objects (review)
--------------------------
Don't forget that one compares *references* using double equals, and
*contents* with the equals () method.


EXTRA CREDIT:
========================================================================

Note : Extra credit will only be graded if you get a 100% on the
       implementation part of your program.

(+10) Implement the third menu option.  For this one, do the search as
      in the second menu choice, but in addition display how one gets
      there from the root node.  Here are sample outputs for "Peter
      Brady":

      Enter the name to search :
      Peter Brady
      Peter Brady is in the tree.
      Peter Brady, Mike Brady's child
      Mike Brady, Alice Nelson's child

      If the name is not in the tree (e.g., "Tiger"), do exactly as the
      "Tiger" search above.

(+5)  As you've noticed, indentation makes things much easier to read.
      So when the program prints the family tree, indent each level by
      two spaces.  Using the sample above:

      Alice Nelson
        Carol Brady, Alice Nelson's child
          Marcia Brady, Carol Brady's child
          Jan Brady, Carol Brady's child
          Cindy Brady, Carol Brady's child
        Mike Brady, Alice Nelson's child
          Greg Brady, Mike Brady's child
          Peter Brady, Mike Brady's child
          Bobby Brady, Mike Brady's child

      If you do both extra credits, don't forget to indent the results
      from menu item three.


REQUIREMENT CHECK LIST:
========================================================================

IMPLEMENTATION FOR P4:

   For 42/60 (70%):
      - Compiles under JDK 1.1.7.
      - Prompts user for information in correct format
      - Reads input from user
      - Sets data structure for names
      - Fills data structure for names
      - Prints menu
      - Accepts menu input

   For 51/60 (85%): Everything for 70%, plus:
      - Prints entire tree
	
   For 60/60 (100%): Everything for 85%, plus:
      - Prompts user for name to search
      - Searches the tree for the name, using any algorithm
      - Prints search results
      - Handles case where search failed

PROGRAMMING STYLE:

   0.  Software Documentation
       -code easy to read and understand
       -included correct header on  .java containing ID
        information
       -DEBUG code implemented

   1.  Java-doc Style Header Documentation
       -every method (including constructors) has a
        description documented above the method header,
        including pre- and post-conditions
       -every method has an @param tag for each
        parameter passed in, describing that parameter
       -every method has an @return tag for
        the return type, describing what's returned

   2.  Internal Documentation
       -inline code documentation on non-obvious code
        segments

   3.  Coding Style
       -variable and constant names meaningful
       -variable and constant declarations documented

   4.  Modularity, Abstraction, and Encapsulation
       -minimal duplication of code/behavior
       -no direct access to instance variables
        except within the class where they reside
       -uses constants rather than hard-wiring values
       -appropriate method modifiers
        (public, private, protected, abstract, et al)


PROGRAM RESTRICTIONS:
========================================================================

     These are the restrictions for this program.  You MUST do the
     following:

    o Your driver must be called P4.java.
    o You may not use java.util.Vector, java.util.Dictionary,
      java.util.HashTable, or java.util.Stack in the implementation of
      this program.
    o You must use only dynamic data structures in implementing this
      program; otherwise you will receive a zero on the program.
    o You may make any methods and classes as you see fit, but your TA
      will take off points if you show poor OO design.


TURNIN:
========================================================================

        o  Files to be turned in (Be sure to ftp the files in ascii):

           P4.java
           [any other .java files you made]

        o  Files NOT to turn in (You shouldn't have altered these, so we
           already have them.):

           util.java
           *.dat
           *.ans

        o  How to turnin:
                o  "workon cs1502"
                o  "turnin p4 P4.java [other files]"
                o  Do "getback p4" to ensure that your project was
                   received correctly.
