CS 1502: JAVA! Programming Assignment #6 - Winter 1999

Program Title:   Baking and Coding at the Pham's
Assigned:        February 5, 1999
P6 Program Due:  February 19, 1999
D6 Design Due:   February 13, 1999

Files Provided:
    o p6.nfo              - this file
    o P6Toolkit.class     - makes piano operational
    o *.au                - audio files (one file for each tone)

NOTE: Be sure that the *.au and *.class files are transfered in binary! 

Learning Objectives:
    o introduction to graphics
    o graphical user interface (GUI)
    o the Java AWT toolkit
    o event handling and event-driven programming


GENERAL OVERVIEW:
========================================================================

As we all know, Chef Vu (Swedish?) loves to bake.  In fact, one could go
so far as to call him a master of the oven.  His only problem is that he
is quite absent-minded, and frequently forgets his baked goods in the
oven -- that is until the men in red and orange jackets break down his
door and hose down his kitchen.  To facilitate this problem, Vu decided
to install a virtual piano on his oven.  How is this going to help, you
ask?  Simple!  Vu, an accomplished pianist (lessons for 16+ years),
knows the exact running time of numerous piano songs.  By programming a
specific song into his virtual piano-oven, Vu will know to take the
baked goods out of the oven when the song ends.

Here's where you come in.  Vu, much too busy with his brownies, does not
have time to make this virtual piano and has instead asked you.  This
piano needs to be have at least a full octave of notes (from middle C to
high C) and be playable ...just how do I do this you say... with
lovable, fuzzy-wuzzy, furry-wurry, cutie-wootie GUIs (not bakeable)!

    GUI (Goooooeeeyyy) - Graphical User Interface. An environment that
        allows the user to interact with objects visually.  GUIs are
        constructed from containers and objects.

GUIs are everywhere.  Ever use Windows?  Netscape?  Word?  They all
contain GUIs.  Netscape even uses JAVA to implement its mail manager's
GUIs.  You will notice that each GUI is contained in a window and is
built from the same basic objects as any other.  A very useful widget is
that of the (drum roll please) Button (Hint:Very Important!).  A button
is an area set aside to wait for a users click, and then performs a
specified action.

        "So, can i just make 420 buttons and be done?"
        "NO!  Why don't you read the next section....."
        "OK."
 

IMPLEMENTING GUIS:
========================================================================

First thing to note when creating GUIs is that you are going to need a
class that extends Frame.  Frame is a class in the API that holds the
base code for any GUI window.  What else will you need?  Well, something
needs to "listen" for actions performed on objects (like mouse clicks),
so you'll need an ActionListener. Something also needs to listen to your
window for window actions (like maximize, minimize, or close) so you
will also need a WindowListener.  Also, be sure to import the java.awt.*
and java.awt.event.* in your frame class so you have access to them.
Here's an example class declaration for your GUI class:
        
    import java.awt.*;
    import java.awt.event.*;

    public class Vus_piano extends Frame implements WindowListener,
                                                    ActionListener {
    }

So, what have we just done?  We created a class Vus_piano, which extends
Frame, and implements WindowListener and ActionListener.  In this case,
class Vus_piano is its own Action and WindowListener, and thus must have
the appropriate methods for each.

NOTE: MAKE SURE TO DO LAB5 BEFORE THIS PROGRAM! IT IS YOUR INTRO TO
GUIS.


PROGRAM BAKETHROUGH:
========================================================================

Now that you've got the ingredients, what do you have to do?  Unlike
your previous programs, the main interface here is not text.  The
presentation of the GUI will be your focus here.  Your GUI will need to
represent a piano with keys from the third and fourth octaves.  It must
also have a text section which prints the notes being played.  (Notice:
you do not need a sound card to test this program).  There also needs to
be a record button that will start/stop recording when pressed, and a
playback button which will play back the recorded material.  This should
all be contained in one window and be somewhat pleasing to the eye.  To
simplify things, with respect to the piano keyboard, only the order and
color of the keys will matter.  Thus, your black keys can be the same
size as your white keys without penalty.  For a review of music and
pianos, read the following music section.


PIANO BASICS and P6 SPECIFICS (READ! IMPORTANT P6 and TOOLKIT INFO)
========================================================================

A single octave of notes for a piano is defined as the range of eight 
notes from C to the next higher C.  Thus one octave would be:

C D E F G A B C 

However, remember that sharps and flats exist.  (They are half-steps.)
For this program, we will ignore flats and only have sharps in our
musical notation.  Thus a full octave of notes (and what your piano
needs to have) would be:

C c# D d# E F f# G g# A a# B C

Where the lowercase notes are black keys and the capital ones white.  We
have provided for you a P6Toolkit which will automagically play the
notes for you.  We have provided you with one octaves (the 4th).  All
you have to do is call the following method:

public static void play (char note, int octave, boolean sharp)
                        throws IOException

where note is the note 'A' to 'G' (IN UPPERCASE), the octave is a number
from 3 to 5 (5 only works for C), and sharp is true if the note is sharp
and false if not.  This method WILL NOT print anything out; the printing
of the notes is left to you.  Here's an example call to the method to
play an A sharp:

P6Toolkit.play('A',4,true);

If there is an error when playing the file (e.g., sound file does not
exist), then this method will throw an exception.  If the problem is
hardware related (e.g., no sound card present), then this will display
an error message.  Your program must handle the first type of errors;
you may safely ignore the second type.

Another helpful method, public static void pause(), is included in the
P6toolkit.  You'll need to use so that each note will play separately on
playback.  A call to this method with no parameters will simply pause
the piano for a quarter of a second.


DESIGN DOC BAKETHROUGH:
========================================================================

The structure for the design should be similar to example design
document from p3.  You'll find more example design documents on the
class web page.  Instructions on writing and grading design documents
may be found in "design_info.txt".

Make sure you answer these scenario questions:

(1)  What object type will you use for your piano keys and why?
(2)  What class(es) will be responsible for handling actions?
(3)  What object type will you use to display the notes on screen?
     (remember, this must be in your GUI!)
(4)  How can you easily design this program to add an octave?

Your design is due at 11:59 pm on the Saturday before the program is
due.


HINTS AND TIPS:
========================================================================

the uncloseable window
----------------------
Don't forget to have a window listener method that handles closing the
windows, or you will have an uncloseable window....

support files
-------------
Make sure the *.au and P6Toolkit files are in the same directory as your
driver!  Also make sure they were transfered in binary.

need more graphics help?
------------------------
Make sure you do the labs.  In addition, "Java in a Nutshell" is an
invaluable resource when writing graphical program.s

demo
----
A demo version of p6 will be put available on workon as soon as it is
completed.  Keep an eye out on the announce newsgroup.


EXTRA CREDIT:
========================================================================

Note : Extra credit will only be graded if you get a 100% on the
       implementation part of your program.

(+5)  Have a way the user can input notes (besides the buttons
      representing the keyboard) and a button to submit those notes and
      have them play.  (Hence, Vu could program his oven to play a song
      and not burn his brownies).

(+15) Have the piano able to read in data files with songs stored in
      them (any format you like) and also write out data files in a
      record mode.  Note, this is hard and will require research, since
      1502 does not cover file I/O.


REQUIREMENT CHECK LIST:
========================================================================

IMPLEMENTATION FOR P6:

   For 42/60 (70%):
      - Compiles under JDK 1.1.7.
      - Window created on screen.  
      - Keys are in right order and colored correctly.
      - Console is not used; all interactions in GUI.
      - Window closes.
      
   For 51/60 (85%): Everything for 70%, plus:
      - GUI displays notes when keys are clicked on (and plays them).
      - Two complete octaves of notes are available.
      
   For 60/60 (100%): Everything for 85%, plus:
      - GUI is pleasing to eye.
      - Piano has start/stop record button.
      - Piano implements record function properly; plays exactly what
        was recorded

PROGRAMMING STYLE:

   0.  Software Documentation
       -code easy to read and understand
       -included correct header on  .java containing ID
        information
       -DEBUG code implemented

   1.  Java-doc Style Header Documentation
       -every method (including constructors) has a
        description documented above the method header,
        including pre- and post-conditions
       -every method has an @param tag for each
        parameter passed in, describing that parameter
       -every method has an @return tag for
        the return type, describing what's returned

   2.  Internal Documentation
       -inline code documentation on non-obvious code
        segments

   3.  Coding Style
       -variable and constant names meaningful
       -variable and constant declarations documented

   4.  Modularity, Abstraction, and Encapsulation
       -minimal duplication of code/behavior
       -no direct access to instance variables
        except within the class where they reside
       -uses constants rather than hard-wiring values
       -appropriate method modifiers
        (public, private, protected, abstract, et al)


BAKING RESTRICTIONS:
========================================================================

     These are the restrictions for this program.  You MUST do the
     following:

    o Your driver must be called P6.java.
    o You may not use util.java; all interaction must be in GUI.  (You
      may NOT use the console!)
    o This must be a graphical application, NOT an applet.
    o You may make any methods and classes as you see fit, but your TA
      will take off points if you show poor OO design.


TURNIN:
========================================================================

        o  Files to be turned in (Be sure to ftp the files in ascii):

           P6.java
           [any other .java files you made]

        o  Files NOT to turn in (You shouldn't have altered these, so we
           already have them.):

           *.au
           P6toolkit.class


        o  How to turnin:
                o  "workon cs1502"
                o  "turnin p6 P6.java [other files]"
                o  Do "getback p6" to ensure that your project was
                   received correctly.
