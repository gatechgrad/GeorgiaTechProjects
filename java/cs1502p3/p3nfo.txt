CS 1502: JAVA! Programming Assignment #3 - Winter 1999

Program Title:  Saturday Night at the Movies
Assigned:       January 15, 1999
P3 Program Due: January 29, 1999

Files Provided:
    o p3.nfo              - this file
    o p3_100.dat          - sample data for a 100
    o p3_100.ans          - sample answers for a 100
    o p3_extra.dat        - sample data for a 100 + extra credit
    o p3_extra.ans        - sample answer for a 100 + extra credit

Learning Objectives:
    o Complex Data Structures
      - Records
      - Linked Lists and other dynamic data structures
    o Traversal of data structures
    o Manipulating and comparing Strings


GENERAL OVERVIEW:
========================================================================

CS1502 Head TA Vu Pham can often be seen watching movies at the AMC
North Dekalb 16 on North Druid Hills and Lawrenceville Highway. Vu's
movie staples include comedies, dramas and action flicks.  He likes
watching certain movies on the opening weekend, but is often
disappointed because the movie is sold out.  For example, about a month
ago, he wanted to see the new Tom Hanks/Meg Ryan movie, "You've Got
Mail."  (You probably didn't know that Tom Hanks' character in the
movie, Joe Fox, is based on Vu's life.)  When he got to the theater, he
was distraught when he found out that there were no more tickets for the
movie.  He ended up watching "Babe 2: Pig in the City" instead.  His
date was not impressed!  If only he had a computer program that would
simulate a movie theater...  That's where you all come in.


PROGRAM WALKTHROUGH:
========================================================================

Do you remember stacks and queues from CS1501?  In an nutshell, queues
are first-in, first-out (FIFO) data structures, while stacks are
last-in, first-out (LIFO) data structures.  For a more detailed
explanation, refer to pages 225-229 of the CS1501 book.

A linked list, modeled as either a stack or a queue, can be used to
represent all the movies that are playing at a particular theater.
Another linked list, similarly modeled, can be used to model the
preferences of the VunaPhamer and all the other people queuing to watch
the movies.  This is just one approach to this problem and you may
attack the problem in anyway that you like.

Generally problems of this nature require some sort of a 'record' class
to hold the data and a 'holder' class.  In this case the record class is
a "node" and the holder class holds the first node. The other nodes for
this linked list are listed as references in the other nodes.

Here's a diagram to illustrate:

 ____________________
|                    |
|       HOLDER 	     |
|     __________     | 		 ___________
|    |		|    |		|	    |
|    |   NODE 	|_______________    NODE    |
|    |__________|    |		|___________|
|		     |
|____________________|

The implementation of this program will require a couple of linked lists
and the driver for the program can be the holder for all these linked
lists.  This is acceptable as you will need access to these lists very
frequently.  The challenge in this program is to code the linked list
structure by yourself.  MAKE SURE YOU READ OVER THE PROGRAM RESTRICTIONS
BELOW.

When the program starts up the user should be prompted for the name of
the movie that is playing at the theater and the number of seats in that
theater.  This should look like the following:

Enter the name of movie playing in theater #1 :
Enter the number of seats in the theater   #1 :
Enter the name of movie playing in theater #2 :
Enter the number of seats in the theater   #2 :

The user should be continually prompted for input specified above until
the string "END" is entered when the program prompts for the name of the
movie playing in a theater.

For this linked list, the node would contain information about a single
movie such as its name and the number of seats available and the next
node, while a 'holder' would have just the first node.

After this the user should be prompted for the name of a customer at the
theater.  After this is done the user should be prompted for the
customers' movie preferences.  This should look like the following:

Enter the name of customer #1 :
For customer #1 :
Enter preference #1 :
Enter preference #2 :
	:
	:
Enter the name of customer #2 :
For customer #2 :
Enter preference #1 :
Enter preference #2 :
	:
	:
Enter the name of customer #3 :
For customer #3 :
Enter preference #1 :
Enter preference #2 :
	:
	:

When the user enters "END" the program should stop prompting the user
for his/her movie preferences.  The program should now prompt the user
for the name of the next customer; the cycle and prompt for the
customers' preferences should continue until an "END" is again entered.
If the user enters "END" when prompted for the name of the customer the
program should stop prompting the user for information.

An example of user input is shown below:

Enter the name of movie playing in theater #1 : 
Get Shorty
Enter the number of seats in the theater   #1 :
40		

Enter the name of movie playing in theater #2 :
Babe 2 : Pig in the City
Enter the number of seats in the theater   #2 :
40

Enter the name of movie playing in theater #3 :
The Last Unicorn
Enter the number of seats in the theater   #3 :
25

Enter the name of movie playing in theater #4 :
You've Got Mail
Enter the number of seats in the theater   #4 :
1

Enter the name of movie playing in theater #5 :
Dark Goddess
Enter the number of seats in the theater   #5 :
10

Enter the name of movie playing in theater #6 :
The Incredible Sarah
Enter the number of seats in the theater   #6 :
10

Enter the name of movie playing in theater #7 :
END

Enter the name of customer #1 :
Death, The TA formerly known as
For customer #1 :
Enter preference #1 :
You've Got Mail
Enter preference #2 :
Get Shorty
Enter preference #3 :
END

Enter the name of customer #2 :
Date, Vu's
For customer #2 :
Enter preference #1 :
You've Got Mail
Enter preference #2 :
Babe 2 : Pig in the City
Enter preference #3 :
END

Enter the name of customer #3 :
Worshipper, Bill Gates
For customer #3 :
Enter preference #1 :
Get Shorty
Enter preference #2 :
The Last Unicorn
Enter preference #3 :
Dark Goddess
Enter preference #4 :
END

Enter the name of customer #4 :
Shackelford, Russ
For customer #4 :
Enter preference #1 :
Get Shorty
Enter preference #2 :
END

Enter the name of customer #5 :
Nolan, Lee
For customer #5 : 
Enter preference #1 :
The Incredible Sarah
Enter preference #2 :
END

Enter the name of customer #6 :
END

After all the information has been entered the program has to do its
"thing" and print to screen the movie that each customer will see.  This
has to be done in the format specified below.

Customer #1 : Death, The TA formerly known as
Ticket for  : You've Got Mail 
Customer #2 : Date, Vu's
Ticket for  : Babe 2 : Pig in the City
Customer #3 : Worshipper, Bill Gates
Ticket for  : Get Shorty
Customer #4 : Shackelford, Russ
Ticket for  : Get Shorty
Customer #5 : Nolan, Lee 
Ticket for  : The Incredible Sarah

Please keep in mind that there is limited seating in each theater.
There also might be a greater demand than supply for tickets to a
certain movie.  Remember that the customer will select the movie highest
on his preference list that still has remaining tickets.  Assume that
the user will provide inputs such that all customers will be able to get
a movie ticket (albeit not necessarily their first choice).


DESIGN DOC WALKTHROUGH:
========================================================================

To get you thinking, we'll be shortly releasing a file p3design.txt.
You don't need to do anything with it, other than read it.  It is a high
level design document for the program.  You may want to use the design
when you code p3.  Keep your eyes glued to the newsgroup, for its
release date.  More information about design documents will appear in
p4.


HINTS AND TIPS:
========================================================================

Using util
----------
Using util is essential to taking in input from the user.  Here are some
quick tips on how to use util.

Reading in an int:
     int input = (util.readlnInteger ()).intValue ();
       // or yet another way
     int input = Integer.valueOf (util.readLine ()).intValue ();

Reading in a String:
     String strInput = util.readLine ();

Don't forget to put util.java in the same directory as your p3.


Testing Strings
---------------
Remember that Strings are not primitives, but objects.  For objects, the
double equal ("==") compares *references* -- it returns true if the
arguments point to the same object in memory.  To test if two objects
have the same *contents*, use the equals () method.  For example:

     String a = new String ("foo");
     String b = new String ("foo");
     System.out.println (a == b);        // prints false
     System.out.println (a.equals (b));  // prints true


EXTRA CREDIT:
========================================================================

Note : Extra credit will only be graded if you get a 100% on the
       implementation part of your program.

(+10) The final output, i.e., the listing of movies to customers, should
      be sorted alphabetically by customer's name.  (However, tickets
      are still given based on whose name was entered first.)  Any
      sorting algorithm may be used to implement this requirement.  Look
      in the API for a method to determine which string comes
      lexographically first (i.e., appearing first in the dictionary).
      See p3_extra.ans for the format.


REQUIREMENT CHECK LIST:
========================================================================

IMPLEMENTATION FOR P3:

   For 42/60 (70%):
      - Compiles under JDK 1.1.7.
      - Prompts user for information in correct format
      - Reads input from user
      - Sets data structure for movies
      - Sets data structure for customers
      - Sets data structure for customer preferences

   For 51/60 (85%): Everything for 70%, plus:
      - Fills data structure for movies
      - Fills data structure for customers
      - Fills data structure for customer preferences
	
   For 60/60 (100%): Everything for 85%, plus:
      - Prints out the correct information
      - Files should diff or fc perfectly

PROGRAMMING STYLE:

   0.  Software Documentation
       -code easy to read and understand
       -included correct header on *.java containing ID
        information
       -DEBUG code implemented

   1.  Java-doc Style Header Documentation
       -every method (including constructors) has a
        description documented above the method header,
        including pre- and post-conditions
       -every method has an @param tag for each
        parameter passed in, describing that parameter
       -every method has an @return tag for
        the return type, describing what's returned

   2.  Internal Documentation
       -inline code documentation on non-obvious code
        segments

   3.  Coding Style
       -variable and constant names meaningful
       -variable and constant declarations documented

   4.  Modularity, Abstraction, and Encapsulation
       -minimal duplication of code/behavior
       -no direct access to instance variables
        except within the class where they reside
       -uses constants rather than hard-wiring values
       -appropriate method modifiers
        (public, private, protected, abstract, et al)


PROGRAM RESTRICTIONS:
========================================================================

     These are the restrictions for this program.  You MUST do the
     following:

    o Your driver must be called P3.java.
    o You may not use java.util.Vector, java.util.Dictionary,
      java.util.HashTable, or java.util.Stack in the implementation of
      this program.
    o You must use only dynamic data structures in implementing the
      movie finder; otherwise you will receive a zero on the program.
    o You may make any methods and classes as you see fit, but your TA
      will take off points if you show poor OO design.


TURNIN:
========================================================================

    o  Files to be turned in:
            P3.java
            [any other necessary files you made]

    o  Files NOT to turn in (You shouldn't have altered these, so we
       already have them.):

            util.java
	    p3_100.dat
	    p3_100.ans

    o  How to turnin:
            o  "workon cs1502"
            o  "turnin p3 P3.java filename2.java . . ."
            o  Use "getback p3" to ensure that your project was received
               correctly.
